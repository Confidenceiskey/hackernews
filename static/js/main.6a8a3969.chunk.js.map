{"version":3,"sources":["Button.js","Search.js","Sort.js","Table.js","Loading.js","WithLoading.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","className","children","defaultProps","type","Search","this","input","focus","props","searchTerm","onTextChange","onSubmit","value","onChange","ref","element","Component","Sort","sortKey","activeSortKey","onSort","sortClass","classNames","Table","list","SORTS","isSortReverse","onDismiss","sortedList","reverseSortedList","reverse","largeColumn","width","midColumn","smallColumn","style","map","item","key","objectID","href","url","title","author","num_comments","points","Loading","WithLoading","isLoading","rest","PATH_BASE","NONE","TITLE","sortBy","AUTHOR","COMMENTS","POINTS","App","_isMounted","id","state","searchKey","results","hits","page","updatedHits","filter","setState","onSearchChange","event","target","onSearchSubmit","needsToSearchTopStories","fetchSearchTopStories","preventDefault","setSearchTopStories","result","oldHits","axios","then","data","catch","err","error","ButtonWithLoading","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TA0BeA,G,MAvBA,SAATA,EAAU,GAAsC,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAYpC,OAVAH,EAAOI,aAAe,CACpBF,UAAW,IAUX,4BACED,QAASA,EACTC,UAAWA,EACXG,KAAK,UAEJF,KCgBQG,E,4LAhCPC,KAAKC,OACPD,KAAKC,MAAMC,U,+BAKN,IAAD,SACmDF,KAAKG,MAAtDC,EADF,EACEA,WAAYC,EADd,EACcA,aAAcC,EAD5B,EAC4BA,SAAUV,EADtC,EACsCA,SAS5C,OACE,0BAAMU,SAAUA,GACd,2BACER,KAAK,OACLS,MAAOH,EACPI,SAAUH,EACVI,IAAM,SAAAC,GAAO,OAAI,EAAKT,MAAQS,KAEhC,4BAAQZ,KAAK,UACVF,Q,GA3BUe,a,iBCkBJC,EAjBJ,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,OAAQnB,EAAe,EAAfA,SAExCoB,EAAYC,IAChB,gBACA,CAAE,gBAAiBJ,IAAYC,IAGjC,OACE,kBAAC,EAAD,CACEpB,QAAS,kBAAMqB,EAAOF,IACtBlB,UAAWqB,GAEVpB,IC2FQsB,EAtGD,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,MAAOP,EAAgD,EAAhDA,QAASQ,EAAuC,EAAvCA,cAAeN,EAAwB,EAAxBA,OAAQO,EAAgB,EAAhBA,UAEtDC,EAAaH,EAAMP,GAASM,GAC5BK,EAAoBH,EAAgBE,EAAWE,UAAYF,EAe3DG,EAAc,CAClBC,MAAO,OAGHC,EAAY,CAChBD,MAAO,OAGHE,EAAc,CAClBF,MAAO,OAGT,OAEE,yBAAKhC,UAAU,SACb,yBAAKA,UAAU,gBACb,0BAAMmC,MAAOJ,GACX,kBAAC,EAAD,CACEb,QAAS,QACTE,OAAQA,EACRD,cAAeD,GAHjB,UAQF,0BAAMiB,MAAOF,GACX,kBAAC,EAAD,CACEf,QAAS,SACTE,OAAQA,EACRD,cAAeD,GAHjB,WAQF,0BAAMiB,MAAOD,GACX,kBAAC,EAAD,CACEhB,QAAS,WACTE,OAAQA,EACRD,cAAeD,GAHjB,aAQF,0BAAMiB,MAAOD,GACX,kBAAC,EAAD,CACEhB,QAAS,SACTE,OAAQA,EACRD,cAAeD,GAHjB,WAQF,0BAAMiB,MAAOD,GAAb,YAIDL,EAAkBO,KAAI,SAAAC,GAAI,OACzB,yBAAKC,IAAKD,EAAKE,SAAUvC,UAAU,aACjC,0BAAMmC,MAAOJ,GACX,uBAAGS,KAAMH,EAAKI,KAAMJ,EAAKK,QAE3B,0BAAMP,MAAOF,GACVI,EAAKM,QAER,0BAAMR,MAAOD,GACVG,EAAKO,cAER,0BAAMT,MAAOD,GACVG,EAAKQ,QAER,0BAAMV,MAAOD,GACX,kBAAC,EAAD,CACEnC,QAAS,kBAAM4B,EAAUU,EAAKE,WAC9BvC,UAAU,iBAFZ,kB,QCtFG8C,EANC,WACd,OACE,4CCQWC,EATK,SAAC/B,GAAD,OAAe,YAA6B,IAA1BgC,EAAyB,EAAzBA,UAAcC,EAAW,6BAC7D,OACED,EACA,kBAAC,EAAD,MAEA,kBAAChC,EAAeiC,KCMdC,EAAY,gCAOZzB,GAFG,UAAMyB,GAAN,OAJW,UAIX,YAHY,UAGZ,OARa,QAQb,YAFU,SAIL,CACZC,KAAM,SAAA3B,GAAI,OAAIA,GACd4B,MAAO,SAAA5B,GAAI,OAAI6B,iBAAO7B,EAAM,UAC5B8B,OAAQ,SAAA9B,GAAI,OAAI6B,iBAAO7B,EAAM,WAC7B+B,SAAU,SAAA/B,GAAI,OAAI6B,iBAAO7B,EAAM,gBAAgBM,WAC/C0B,OAAQ,SAAAhC,GAAI,OAAI6B,iBAAO7B,EAAM,UAAUM,aAiJ1B2B,E,YA3Ib,aAAe,IAAD,8BACZ,+CAHFC,YAAa,EAEC,EAad/B,UAAY,SAACgC,GAAQ,IAAD,EACa,EAAKC,MAA5BC,EADU,EACVA,UAAWC,EADD,EACCA,QADD,EAEKA,EAAQD,GAAvBE,EAFU,EAEVA,KAAMC,EAFI,EAEJA,KAGRC,EAAcF,EAAKG,QADT,SAAA7B,GAAI,OAAIA,EAAKE,WAAaoB,KAG1C,EAAKQ,SAAS,CACZL,QAAQ,eACHA,EADE,eAEJD,EAAY,CAACE,KAAME,EAAaD,KAAMA,QAvB/B,EA4Bd5C,OAAS,SAACF,GACR,IAAMQ,EAAgB,EAAKkC,MAAM1C,UAAYA,IAAY,EAAK0C,MAAMlC,cACpE,EAAKyC,SAAS,CACZjD,UACAQ,mBAhCU,EAoCd0C,eAAiB,SAACC,GAChB,EAAKF,SAAS,CACZ1D,WAAY4D,EAAMC,OAAO1D,SAtCf,EA0Cd2D,eAAiB,SAACF,GAAW,IACnB5D,EAAe,EAAKmD,MAApBnD,WACR,EAAK0D,SAAS,CACZN,UAAWpD,IAET,EAAK+D,wBAAwB/D,IAC/B,EAAKgE,sBAAsBhE,GAE7B4D,EAAMK,kBAlDM,EAqDdC,oBAAsB,SAACC,GAAY,IACzBb,EAAea,EAAfb,KAAMC,EAASY,EAATZ,KADkB,EAED,EAAKJ,MAA5BC,EAFwB,EAExBA,UAAWC,EAFa,EAEbA,QAEbe,EAAUf,GAAWc,EAAOf,GAAaC,EAAQD,GAAWE,KAAO,GAEnEE,EAAW,sBAAOY,GAAP,YAAmBd,IAEpC,EAAKI,SAAS,CACZL,QAAQ,eACHA,EADE,eACQD,EAAY,CAAEE,KAAME,EAAaD,KAAMA,KAEtDhB,WAAW,KAjED,EAqEdyB,sBAAwB,SAAChE,GAA0B,IAAduD,EAAa,uDAAN,EAC1C,EAAKG,SAAS,CAAEnB,WAAW,IAE3B8B,IAAM,GAAD,OAAI5B,GAAJ,OAzFW,UAyFX,YAxFY,UAwFZ,OAA8CzC,EAA9C,YAvFU,SAuFV,OAAyEuD,EAAzE,YAtFS,gBAsFT,OA5FW,QA6Fbe,MAAK,SAAAH,GAAM,OAAI,EAAKlB,YAAc,EAAKiB,oBAAoBC,EAAOI,SAClEC,OAAM,SAAAC,GAAG,OAAI,EAAKxB,YAAc,EAAKS,SAAS,CAAEgB,MAAOD,QA1E9C,EA6EdV,wBAA0B,SAAC/D,GACzB,OAAQ,EAAKmD,MAAME,QAAQrD,IA5E3B,EAAKmD,MAAQ,CACXE,QAAS,KACTD,UAAW,GACXpD,WA1BgB,QA2BhB0E,MAAO,KACPnC,WAAW,EACX9B,QAAS,OACTQ,eAAe,GATL,E,iFAkFZrB,KAAKqD,YAAa,EADA,IAGVjD,EAAeJ,KAAKuD,MAApBnD,WACRJ,KAAK8D,SAAS,CACZN,UAAWpD,IAEbJ,KAAKoE,sBAAsBhE,K,6CAI3BJ,KAAKqD,YAAa,I,+BAGV,IAAD,SAC8ErD,KAAKuD,MAAlFE,EADD,EACCA,QAASrD,EADV,EACUA,WAAYoD,EADtB,EACsBA,UAAWsB,EADjC,EACiCA,MAAOnC,EADxC,EACwCA,UAAW9B,EADnD,EACmDA,QAASQ,EAD5D,EAC4DA,cAC7DsC,EAAOF,GAAWA,EAAQD,GAAaC,EAAQD,GAAWG,KAAO,EACjExC,EAAOsC,GAAWA,EAAQD,GAAaC,EAAQD,GAAWE,KAAO,GACjEqB,EAAoBrC,EAAYjD,GAEtC,OACE,yBAAKE,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEY,MAAOH,EACPC,aAAcL,KAAK+D,eACnBzD,SAAUN,KAAKkE,gBAHjB,WAQAY,EACA,yBAAKnF,UAAU,gBACb,uBAAGmC,MAAO,CAACkD,MAAO,QAAlB,0BAGF,kBAAC,EAAD,CACE7D,KAAMA,EACNC,MAAOA,EACPP,QAASA,EACTQ,cAAeA,EACfN,OAAQf,KAAKe,OACbO,UAAWtB,KAAKsB,YAGpB,yBAAK3B,UAAW,gBACd,kBAACoF,EAAD,CACEpC,UAAWA,EACXjD,QAAS,kBAAM,EAAK0E,sBAAsBZ,EAAWG,EAAO,KAF9D,c,GAlIQhD,aCjBEsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.6a8a3969.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick, className, children }) => {\n\n  Button.defaultProps = {\n    className: '',\n  };\n\n  Button.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n  };\n\n  return (\n    <button\n      onClick={onClick}\n      className={className}\n      type=\"button\"\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Search extends Component {\n  componentDidMount() {\n    if (this.input) {\n      this.input.focus();\n    }\n  }\n\n\n  render(){\n    const { searchTerm, onTextChange, onSubmit, children } = this.props;\n\n    Search.propTypes = {\n      searchTerm: PropTypes.string,\n      onTextChange: PropTypes.func,\n      onSubmit: PropTypes.func.isRequired,\n      children: PropTypes.node.isRequired,\n    };\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input \n          type=\"text\" \n          value={searchTerm}\n          onChange={onTextChange} \n          ref={ element => this.input = element }\n        />\n        <button type=\"submit\">\n          {children}\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Search;","import React from 'react';\nimport classNames from 'classnames';\nimport Button from './Button';\n\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n  \n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  );\n\n  return (\n    <Button \n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  )\n}\n\n  export default Sort;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport Sort from './Sort';\n\nconst Table = ({ list, SORTS, sortKey, isSortReverse, onSort, onDismiss }) => {\n\n  const sortedList = SORTS[sortKey](list);\n  const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\n\n  Table.propTypes = {\n    list: PropTypes.arrayOf(\n      PropTypes.shape({\n        objectID: PropTypes.string.isRequired,\n        author: PropTypes.string,\n        url: PropTypes.string,\n        num_comments: PropTypes.number,\n        points: PropTypes.number,\n      })\n    ).isRequired,\n    onDismiss: PropTypes.func.isRequired,\n  };\n\n  const largeColumn = {\n    width: '40%'\n  };\n\n  const midColumn = {\n    width: '30%'\n  }\n\n  const smallColumn = {\n    width: '10%'\n  }\n  \n  return (\n\n    <div className=\"table\">\n      <div className=\"table-header\">\n        <span style={largeColumn}>\n          <Sort\n            sortKey={'TITLE'}\n            onSort={onSort}\n            activeSortKey={sortKey}\n          >\n            Title\n          </Sort>\n        </span>\n        <span style={midColumn}>\n          <Sort \n            sortKey={'AUTHOR'}\n            onSort={onSort}\n            activeSortKey={sortKey}\n          >\n            Author\n          </Sort>\n        </span>\n        <span style={smallColumn}>\n          <Sort  \n            sortKey={'COMMENTS'}\n            onSort={onSort}\n            activeSortKey={sortKey}\n          >\n            Comments\n          </Sort>\n        </span>\n        <span style={smallColumn}>\n          <Sort\n            sortKey={'POINTS'}\n            onSort={onSort}\n            activeSortKey={sortKey}\n          >\n            Points\n          </Sort>\n        </span>\n        <span style={smallColumn}>\n          Archive\n        </span>\n      </div>\n      {reverseSortedList.map(item => \n        <div key={item.objectID} className=\"table-row\"> \n          <span style={largeColumn}>\n            <a href={item.url}>{item.title}</a>\n          </span>\n          <span style={midColumn}>\n            {item.author}\n          </span>\n          <span style={smallColumn}>\n            {item.num_comments}\n          </span>\n          <span style={smallColumn}>\n            {item.points}\n          </span>\n          <span style={smallColumn}>\n            <Button \n              onClick={() => onDismiss(item.objectID)}\n              className=\"button-inline\"\n            >\n              Dismiss\n            </Button>\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Table;","import React from 'react';\n\nconst Loading = () => {\n  return (\n    <div>Loading...</div>\n  );\n}\n\nexport default Loading;","import React from 'react';\nimport Loading from './Loading';\n\nconst WithLoading = (Component) => ({ isLoading, ...rest }) => {\n  return (\n    isLoading ?\n    <Loading /> \n    : \n    <Component { ...rest } />\n  );\n}\n\nexport default WithLoading;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { sortBy } from 'lodash';\nimport './App.css';\nimport Button from './Button';\nimport Search from './Search';\nimport Table from './Table';\nimport WithLoading from './WithLoading';\n\n//read up to page 167\n\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}&${PARAM_PAGE}`;\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor() {\n    super();\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n  }\n\n  onDismiss = (id) => {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n\n    this.setState({\n      results: { \n        ...results, \n        [searchKey]: {hits: updatedHits, page: page } \n      }\n    });\n  }\n\n  onSort = (sortKey) => {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({\n      sortKey,\n      isSortReverse\n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchTerm: event.target.value\n    });\n  }\n\n  onSearchSubmit = (event) => {\n    const { searchTerm } = this.state;\n    this.setState({\n      searchKey: searchTerm\n    });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  setSearchTopStories = (result) => {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n\n    const oldHits = results && result[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n\n    this.setState({\n      results: {\n        ...results, [searchKey]: { hits: updatedHits, page: page } \n      },\n      isLoading: false\n    });\n  }\n\n  fetchSearchTopStories = (searchTerm, page = 0) => {\n    this.setState({ isLoading: true });\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(err => this._isMounted && this.setState({ error: err }));\n  }\n\n  needsToSearchTopStories = (searchTerm) => {\n    return !this.state.results[searchTerm];\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    const { searchTerm } = this.state;\n    this.setState({\n      searchKey: searchTerm\n    });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const { results, searchTerm, searchKey, error, isLoading, sortKey, isSortReverse } = this.state;\n    const page = results && results[searchKey] ? results[searchKey].page : 0;\n    const list = results && results[searchKey] ? results[searchKey].hits : [];\n    const ButtonWithLoading = WithLoading(Button);\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search \n            value={searchTerm}\n            onTextChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n          Search\n          </Search>\n        </div>\n        { error ?\n          <div className=\"interactions\">\n            <p style={{color: \"red\"}}>Something went wrong!</p>\n          </div>\n          :\n          <Table \n            list={list}\n            SORTS={SORTS}\n            sortKey={sortKey}\n            isSortReverse={isSortReverse}\n            onSort={this.onSort}\n            onDismiss={this.onDismiss}\n          />\n        }\n        <div className =\"interactions\">\n          <ButtonWithLoading\n            isLoading={isLoading}\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More\n          </ButtonWithLoading>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nexport { Button, Search, Table };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}"],"sourceRoot":""}